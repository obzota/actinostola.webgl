
var EventBuffer = function (canvas) {
	this.canvas = canvas;
	this.registerCanvasEvents();

	this.mousetrack = {
		x: 0,
		y: 0,
		x0: 0,
		y0: 0,
		down: false
	};
}

/* Camera movements
	Generated when clic on the canvas
	can release outside */
EventBuffer.prototype.mouseMove = function (event) {
	return;
	this.mousetrack.x = event.clientX;
	this.mousetrack.y = event.clientY;
};

EventBuffer.prototype.mouseDown = function (event) {
	if (event.button == 0) {
		this.mousetrack.down = true;
	};
	this.mousetrack.x0 = event.clientX;
	this.mousetrack.x = event.clientX;
	this.mousetrack.y0 = event.clientY;
	this.mousetrack.y = event.clientY;
};

EventBuffer.prototype.mouseUp = function (event) {
	this.mousetrack.down = false;
	this.mousetrack.x0 = 0;
	this.mousetrack.y0 = 0;
	this.mousetrack.x = 0;
	this.mousetrack.y = 0;
};

/* Zoom/Unzoom
	generated by scrolling on the wheel */

EventBuffer.prototype.mouseScroll = function(event) {
	this.mousetrack.dscroll += event.wheelDelta;
};

EventBuffer.prototype.handleEvents = function (camera) {
	var deltaX = this.mousetrack.x - this.mousetrack.x0;
	var deltaY = this.mousetrack.y - this.mousetrack.y0;
	if (this.mousetrack.down) {
		camera.mouseMoveUpdate(deltaX, deltaY);
	}
	if (this.mousetrack.dscroll != 0) {
		camera.changeRadius(this.mousetrack.dscroll);
		this.mousetrack.dscroll = 0;
	}
	this.mousetrack.x0 = this.mousetrack.x;
	this.mousetrack.y0 = this.mousetrack.y;
};

EventBuffer.prototype.registerCanvasEvents = function () {
	this.canvas.onscroll = this.mouseScroll;
	this.canvas.onmousedown = this.mouseDown;
	document.onmouseup = this.mouseUp;
	document.onmousemove = this.mouseMove;
	this.canvas.onwheel = this.mouseScroll;
};
